// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.Data;

namespace TicketingSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200730111617_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TicketingSystem.Models.AppClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Create",
                            ClaimValue = "create"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Read",
                            ClaimValue = "read"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Update",
                            ClaimValue = "update"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Delete",
                            ClaimValue = "delete"
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TicketingSystem.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LookupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LookupTypeId");

                    b.ToTable("Lookups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(2551),
                            LookupTypeId = 1,
                            Name = "Cold Lead",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8509),
                            LookupTypeId = 1,
                            Name = "Warm Lead",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8634),
                            LookupTypeId = 1,
                            Name = "Hot Lead",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8638),
                            LookupTypeId = 2,
                            Name = "Admin",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8643),
                            LookupTypeId = 2,
                            Name = "DSA",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8647),
                            LookupTypeId = 2,
                            Name = "Agent",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8651),
                            LookupTypeId = 3,
                            Name = "New Lead",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8654),
                            LookupTypeId = 3,
                            Name = "Newly Assigned Lead",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8659),
                            LookupTypeId = 3,
                            Name = "Client",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8662),
                            LookupTypeId = 4,
                            Name = "New Lead",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8665),
                            LookupTypeId = 4,
                            Name = "Newly Assigned Lead",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8667),
                            LookupTypeId = 4,
                            Name = "Client",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8670),
                            LookupTypeId = 5,
                            Name = "PCFI",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8673),
                            LookupTypeId = 5,
                            Name = "Cumbria",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8679),
                            LookupTypeId = 5,
                            Name = "Saricasa",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8682),
                            LookupTypeId = 7,
                            Name = "Sample1",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8685),
                            LookupTypeId = 7,
                            Name = "Sample2",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8688),
                            LookupTypeId = 7,
                            Name = "Sample3",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8691),
                            LookupTypeId = 8,
                            Name = "Facebook",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8694),
                            LookupTypeId = 8,
                            Name = "Instagram",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8699),
                            LookupTypeId = 8,
                            Name = "Twitter",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8702),
                            LookupTypeId = 6,
                            Name = "New",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8706),
                            LookupTypeId = 9,
                            Name = "Invalid SOA",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8708),
                            LookupTypeId = 9,
                            Name = "SOA Adjustment",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8711),
                            LookupTypeId = 9,
                            Name = "Wrong Payment Details",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8714),
                            LookupTypeId = 10,
                            Name = "New",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8716),
                            LookupTypeId = 10,
                            Name = "In progress",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8719),
                            LookupTypeId = 10,
                            Name = "Resolved",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8723),
                            LookupTypeId = 10,
                            Name = "Cancelled",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8726),
                            LookupTypeId = 10,
                            Name = "On-Hold",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8729),
                            LookupTypeId = 10,
                            Name = "Waiting for Someone",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8734),
                            LookupTypeId = 10,
                            Name = "Waiting for Client",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8736),
                            LookupTypeId = 10,
                            Name = "For Outbound",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8739),
                            LookupTypeId = 11,
                            Name = "Male",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8742),
                            LookupTypeId = 11,
                            Name = "Female",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8745),
                            LookupTypeId = 11,
                            Name = "Not Specified",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8749),
                            LookupTypeId = 12,
                            Name = "Single",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8755),
                            LookupTypeId = 12,
                            Name = "Married",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8758),
                            LookupTypeId = 12,
                            Name = "Widowed",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8761),
                            LookupTypeId = 13,
                            Name = "Southlink",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8764),
                            LookupTypeId = 13,
                            Name = "Saricasa",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8768),
                            LookupTypeId = 13,
                            Name = "Tienda",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8771),
                            LookupTypeId = 13,
                            Name = "MIA",
                            Sort = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 4
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8774),
                            LookupTypeId = 14,
                            Name = "Inbound",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8777),
                            LookupTypeId = 14,
                            Name = "Outbound",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8780),
                            LookupTypeId = 15,
                            Name = "Interest Driven",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8783),
                            LookupTypeId = 15,
                            Name = "Sales Inquiry",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8787),
                            LookupTypeId = 15,
                            Name = "Non-Relatable",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8790),
                            LookupTypeId = 16,
                            Name = "Truckline",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8793),
                            LookupTypeId = 16,
                            Name = "FB Messenger",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8796),
                            LookupTypeId = 16,
                            Name = "Email",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8800),
                            LookupTypeId = 2,
                            Name = "Supervisor",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8803),
                            LookupTypeId = 2,
                            Name = "Non-Supervisor",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8806),
                            LookupTypeId = 17,
                            Name = "Super Admin",
                            Sort = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 0
                        },
                        new
                        {
                            Id = 55,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8810),
                            LookupTypeId = 17,
                            Name = "Supervisor",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8813),
                            LookupTypeId = 17,
                            Name = "VA",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 57,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8816),
                            LookupTypeId = 18,
                            Name = "canEdit",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 58,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8819),
                            LookupTypeId = 18,
                            Name = "canDelete",
                            Sort = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 59,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8823),
                            LookupTypeId = 18,
                            Name = "canViewAll",
                            Sort = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        },
                        new
                        {
                            Id = 60,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8827),
                            LookupTypeId = 18,
                            Name = "canCreate",
                            Sort = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 61,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(8861),
                            LookupTypeId = 18,
                            Name = "canAssign",
                            Sort = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 4
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.LookupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LookupTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 185, DateTimeKind.Utc).AddTicks(6217),
                            Name = "Type of Lead",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 185, DateTimeKind.Utc).AddTicks(9877),
                            Name = "Role",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 185, DateTimeKind.Utc).AddTicks(9986),
                            Name = "SMS",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 185, DateTimeKind.Utc).AddTicks(9991),
                            Name = "Email",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 185, DateTimeKind.Utc).AddTicks(9998),
                            Name = "CRI Teams",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(1),
                            Name = "Lead Status",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(4),
                            Name = "Marketing Campaign",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(7),
                            Name = "Source Channel",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(12),
                            Name = "Ticket Issues",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(15),
                            Name = "Ticket Status",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(18),
                            Name = "Gender",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(20),
                            Name = "Marital Status",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(25),
                            Name = "Biller",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(28),
                            Name = "Call Type",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(30),
                            Name = "Inquiry Type",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(33),
                            Name = "Channel",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(35),
                            Name = "Role",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 186, DateTimeKind.Utc).AddTicks(40),
                            Name = "Module Access",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Access = "leads",
                            Name = "Leads"
                        },
                        new
                        {
                            Id = 2,
                            Access = "customers",
                            Name = "Customers"
                        },
                        new
                        {
                            Id = 3,
                            Access = "tickets",
                            Name = "Tickets"
                        },
                        new
                        {
                            Id = 4,
                            Access = "maintenance",
                            Name = "Maintenance"
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.ModuleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppClaimId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppClaimId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleClaims");
                });

            modelBuilder.Entity("TicketingSystem.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isSuperAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9bb5e051-ff72-450f-a9ba-2a799aa04fbd",
                            ConcurrencyStamp = "d9dad3ce-669a-4bc3-ba9c-720bc944c8a5",
                            Name = "Super Sabaw",
                            NormalizedName = "SUPER SABAW",
                            isSuperAdmin = true
                        },
                        new
                        {
                            Id = "9be18648-c958-4ddf-b163-3b84fac5ff3e",
                            ConcurrencyStamp = "f9b1203c-a5a2-455f-8d95-96c36658d7d3",
                            Name = "Bulalord",
                            NormalizedName = "BULALORD",
                            isSuperAdmin = false
                        },
                        new
                        {
                            Id = "0d3347f4-e87c-4cb7-9363-78f89a7ded99",
                            ConcurrencyStamp = "79917f49-e4b3-403b-a45d-1135b0f91f14",
                            Name = "Imburnal",
                            NormalizedName = "IMBURNAL",
                            isSuperAdmin = false
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.RoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules");
                });

            modelBuilder.Entity("TicketingSystem.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 187, DateTimeKind.Utc).AddTicks(1159),
                            Name = "Buyani",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 187, DateTimeKind.Utc).AddTicks(4344),
                            Name = "Luna",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 7, 30, 11, 16, 16, 187, DateTimeKind.Utc).AddTicks(4392),
                            Name = "Saricasa",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TicketingSystem.Models.UserModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ModuleId");

                    b.ToTable("UserModules");
                });

            modelBuilder.Entity("TicketingSystem.Models.UserModuleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppClaimId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppClaimId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ModuleId");

                    b.ToTable("UserModuleClaims");
                });

            modelBuilder.Entity("TicketingSystem.Models.UserTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TicketingSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TicketingSystem.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.Lookup", b =>
                {
                    b.HasOne("TicketingSystem.Models.LookupType", "LookupType")
                        .WithMany("Lookups")
                        .HasForeignKey("LookupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.ModuleClaim", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppClaim", "AppClaim")
                        .WithMany()
                        .HasForeignKey("AppClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.Module", null)
                        .WithMany("ModuleClaims")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.RoleModule", b =>
                {
                    b.HasOne("TicketingSystem.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.Role", null)
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("TicketingSystem.Models.UserModule", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppUser", "AppUser")
                        .WithMany("UserModules")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TicketingSystem.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.UserModuleClaim", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppClaim", "AppClaim")
                        .WithMany()
                        .HasForeignKey("AppClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingSystem.Models.AppUser", "AppUser")
                        .WithMany("UserModuleClaims")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TicketingSystem.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingSystem.Models.UserTeam", b =>
                {
                    b.HasOne("TicketingSystem.Models.AppUser", "AppUser")
                        .WithMany("UserTeams")
                        .HasForeignKey("AppUserId");

                    b.HasOne("TicketingSystem.Models.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
